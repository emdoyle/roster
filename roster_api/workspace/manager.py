import logging
from typing import Optional

import pydantic
from roster_api import constants, settings
from roster_api.messaging.rabbitmq import RabbitMQClient, get_rabbitmq
from roster_api.models.workspace import WorkflowCodeReportPayload, WorkspaceMessage

from ..github.service import GithubService
from ..services.workspace import WorkspaceService
from .git import GitWorkspace

logger = logging.getLogger(constants.LOGGER_NAME)


class WorkspaceManager:
    def __init__(self, rmq_client: Optional[RabbitMQClient] = None):
        self.rmq = rmq_client or get_rabbitmq()

    async def setup(self):
        await self.rmq.register_callback(
            constants.WORKSPACE_QUEUE, self.handle_workspace_message
        )

    async def teardown(self):
        await self.rmq.deregister_callback(
            constants.WORKSPACE_QUEUE, self.handle_workspace_message
        )

    async def handle_workspace_message(self, message: WorkspaceMessage):
        if message.kind != "workflow_code_report":
            logger.debug("(workspace-mgr) Unknown message kind: %s", message.kind)
            return

        try:
            message_payload = WorkflowCodeReportPayload(**message.data)
        except pydantic.ValidationError as e:
            logger.error(
                "(workspace-mgr) Failed to validate workflow code report payload: %s", e
            )
            return

        workspace = WorkspaceService().get_workspace(message.workspace)
        if workspace.kind != "github":
            logger.debug("(workspace-mgr) Unknown workspace kind: %s", workspace.kind)
            return

        github_info = workspace.github_info
        if not github_info:
            logger.debug("(workspace-mgr) No github info provided by workspace message")
            return

        github_service = GithubService(
            installation_id=github_info.installation_id,
            repository_name=github_info.repository_name,
        )
        git_workspace = GitWorkspace(
            root_dir=f"{settings.WORKSPACE_DIR}/{github_info.installation_id}/{github_info.repository_name}",
            token=github_service.get_installation_token(),
        )

        git_workspace.force_to_latest_main(
            repo_url=github_service.get_repo_url(),
        )
        git_workspace.checkout_branch(github_info.branch_name)

        for code_output in message_payload.code_outputs:
            with git_workspace.open(code_output.filepath, "w") as f:
                # TODO: support other code_output kinds
                f.write(code_output.content)

        git_workspace.commit(
            f"Committing changes from workflow {message_payload.workflow_name} ({message_payload.workflow_record})"
        )
        git_workspace.push()
        # TODO: send better metadata for PRs, commit messages through message payload
        pr_url = github_service.create_pull_request(
            title=f"[roster-ai] {message_payload.workflow_name} ({message_payload.workflow_record})",
            body="This Pull Request was generated by Roster! :star:",
            head=github_info.branch_name,
        )
        logger.info("Created PR for %s: %s", github_info.repository_name, pr_url)
